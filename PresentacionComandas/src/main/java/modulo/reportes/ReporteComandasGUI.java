/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modulo.reportes;

import DTOs.viejos.ComandaViejoDTO;
import DTOs.viejos.MesaViejoDTO;
import excepciones.NegocioException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import manejadoresBO.ManejadorBO;
import modulo.comandas.IComandaBO;
import modulo.comandas.IMesaBO;
import modulo.ingredientes.BuscadorIngredienteGUI;

/**
 *
 * @author Beto_
 */
public class ReporteComandasGUI extends javax.swing.JFrame {
    IComandaBO comandaBO = ManejadorBO.crearComandaBO();
    IMesaBO mesaBO = ManejadorBO.crearMesaBO();
//    ICliente clienteBO = ManejadorBO.crearClienteBO;
    List<ComandaViejoDTO> listaComandas;
    DefaultTableModel modelo;
    
    /**
     * Creates new form ReporteComandasGUI
     */
    public ReporteComandasGUI() {
        initComponents();
        modelo = (DefaultTableModel) tblComandas.getModel();
        listaComandas = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        dtcFechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        dtcFechaFin = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbhFechas = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblComandas = new javax.swing.JTable();
        btnRegresar = new javax.swing.JButton();
        btnVistaPrevia = new javax.swing.JButton();
        btnGenerarPDF1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dtcFechaInicio.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Broadway", 0, 18)); // NOI18N
        jLabel1.setText("Reporte de comandas");

        dtcFechaFin.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Fecha Inicio");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Fecha Fin");

        cbhFechas.setText("Filtrar por Periodo de fechas");
        cbhFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbhFechasActionPerformed(evt);
            }
        });

        tblComandas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Hora", "Mesa", "Total de venta", "Estado", "Cliente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblComandas);

        btnRegresar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnVistaPrevia.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnVistaPrevia.setText("Vista Previa");
        btnVistaPrevia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVistaPreviaActionPerformed(evt);
            }
        });

        btnGenerarPDF1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnGenerarPDF1.setText("Generar PDF");
        btnGenerarPDF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPDF1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtcFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtcFechaFin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addGap(94, 94, 94))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(189, 189, 189))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(cbhFechas))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGenerarPDF1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(108, 108, 108)
                                .addComponent(btnVistaPrevia, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbhFechas)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtcFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dtcFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(btnVistaPrevia)
                    .addComponent(btnGenerarPDF1))
                .addGap(26, 26, 26))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVistaPreviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVistaPreviaActionPerformed
        // TODO add your handling code here:
        if(cbhFechas.isSelected()){
            if(dtcFechaInicio.getDate() == null || dtcFechaFin.getDate() == null){
                JOptionPane.showMessageDialog(this, "Por favor, seleccione el lapso de fechas", "Campos incompletos", JOptionPane.ERROR_MESSAGE);
                return;
            }
            cargarComandasPorFecha(toLocalDateTime(dtcFechaInicio.getDate()), toLocalDateTime(dtcFechaFin.getDate()));
        }else{
            cargarComandas();
        }
        
        
    }//GEN-LAST:event_btnVistaPreviaActionPerformed

    private void cbhFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbhFechasActionPerformed
        // TODO add your handling code here:
        if(cbhFechas.isSelected()){
            dtcFechaInicio.setEnabled(true);
            dtcFechaFin.setEnabled(true);
        }else{
            dtcFechaInicio.setEnabled(false);
            dtcFechaInicio.setDate(null);
            dtcFechaFin.setEnabled(false);
            dtcFechaFin.setDate(null);
        }
    }//GEN-LAST:event_cbhFechasActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnGenerarPDF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPDF1ActionPerformed
        // TODO add your handling code here:
        if(tblComandas.getRowCount() <= 0){
            JOptionPane.showMessageDialog(this, "No se puede generar el reporte sin vista previa", "Error", JOptionPane.ERROR_MESSAGE);
                return;
        }
        JOptionPane.showMessageDialog(this, "Reporte generado (No es cierto) ", "Operación exitosa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnGenerarPDF1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReporteComandasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReporteComandasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReporteComandasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReporteComandasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReporteComandasGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarPDF1;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnVistaPrevia;
    private javax.swing.JCheckBox cbhFechas;
    private com.toedter.calendar.JDateChooser dtcFechaFin;
    private com.toedter.calendar.JDateChooser dtcFechaInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblComandas;
    // End of variables declaration//GEN-END:variables

    private LocalDateTime toLocalDateTime (Date date) {
        if (date == null) {
            return null;
        }
        // Convertir java.util.Date a java.time.Instant
        Instant instant = date.toInstant();

        // Obtener la zona horaria del sistema
        ZoneId systemZone = ZoneId.systemDefault();

        // Convertir Instant a ZonedDateTime (Instant con zona horaria)
        LocalDateTime localDateTime = instant.atZone(systemZone).toLocalDateTime();

        // Extraer la parte de la fecha (LocalDate)
        return localDateTime;
    }
    
    private void cargarComandas(){
        //Empezar de 0 la tabla
        modelo.setRowCount(0);
        listaComandas.clear();
        
        try{
            List<ComandaViejoDTO> comandas = comandaBO.obtenerTodos();
            
            if (comandas == null || comandas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron comandas", "Información", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            for (ComandaViejoDTO comanda : comandas) {
                String fecha = crearFechaFormato(
                        comanda.getFechaHora().getYear(), 
                        comanda.getFechaHora().getMonthValue(),
                        comanda.getFechaHora().getDayOfMonth()
                    );
                String hora = crearHoraFormato(
                        comanda.getFechaHora().getHour(),
                        comanda.getFechaHora().getMinute()
                );
                
                MesaViejoDTO mesa = obtenerMesa(comanda.getIdMesa());
                if(mesa == null){
                    JOptionPane.showMessageDialog(this, "Chale, esto no debería pasar", "Error", JOptionPane.ERROR);
                }
                
                modelo.addRow(new Object[] {
                    fecha,
                    hora,
                    mesa.getNumeroMesa(),
                    comanda.getTotalVenta(),
                    comanda.getEstado(),
                    comanda.getIdCliente() //Aqui va el nombre VD BRANDON
                });
                listaComandas.add(comanda);
            }
        }catch(NegocioException ne){
            JOptionPane.showMessageDialog(this, "Error al buscar ingredientes por unidad de medida: " + ne.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(BuscadorIngredienteGUI.class.getName()).log(Level.SEVERE, null, ne);
        }
    }
    
    private void cargarComandasPorFecha(LocalDateTime fechaInicio, LocalDateTime fechaFin){
        //Empezar de 0 la tabla
        modelo.setRowCount(0);
        listaComandas.clear();
        
        try{
            List<ComandaViejoDTO> comandas = comandaBO.obtenerPorFechas(fechaInicio, fechaFin);
            
            if (comandas == null || comandas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron comandas", "Información", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            for (ComandaViejoDTO comanda : comandas) {
                String fecha = crearFechaFormato(
                        comanda.getFechaHora().getYear(), 
                        comanda.getFechaHora().getMonthValue(),
                        comanda.getFechaHora().getDayOfMonth()
                    );
                String hora = crearHoraFormato(
                        comanda.getFechaHora().getHour(),
                        comanda.getFechaHora().getMinute()
                );
                
                MesaViejoDTO mesa = obtenerMesa(comanda.getIdMesa());
                if(mesa == null){
                    JOptionPane.showMessageDialog(this, "Chale, esto no debería pasar", "Error", JOptionPane.ERROR);
                }
                
                modelo.addRow(new Object[] {
                    fecha,
                    hora,
                    mesa.getNumeroMesa(),
                    comanda.getTotalVenta(),
                    comanda.getEstado(),
                    comanda.getIdCliente() //Aqui va el nombre VD BRANDON
                });
                listaComandas.add(comanda);
            }
        }catch(NegocioException ne){
            JOptionPane.showMessageDialog(this, "Error al buscar comandas por rango de fechas: " + ne.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String crearFechaFormato(int anio, int mes, int dia){
        return (dia + "-" + mes + "-" + anio);
    }
    
    private String crearHoraFormato(int hora, int minuto){
        return (hora + ":" + minuto);
    }
    
    private MesaViejoDTO obtenerMesa(Long idMesa){
        try{
            return mesaBO.obtenerPorId(idMesa);
        }catch(NegocioException ne){
            JOptionPane.showMessageDialog(this, "No se obtuvo una mesa relacionada a la comanda", "Error", JOptionPane.ERROR);
        }
        return null;
    }
    
//    private ClienteViejoDTO obtenerCliente(Long idCliente){
//        
//    }
}
