/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modulo.ingredientes;

import DTOs.viejos.IngredienteViejoDTO;
import ENUMs.UnidadMedida;
import controlGUI.IngredienteSeleccionadoListener;
import excepciones.NegocioException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import manejadoresBO.ManejadorBO;

/**
 *
 * @author Beto_
 */
public class BuscadorIngredienteGUI extends javax.swing.JFrame {
    private IIngredienteBO ingredienteBO = ManejadorBO.crearIngredienteBO();
    private List<IngredienteViejoDTO> listaIngredientes = new ArrayList<>();
    private IngredienteSeleccionadoListener listener;
    DefaultTableModel modelo;

    /**
     * Creates new form BuscadorIngredientesGUI
     */
    //public BuscadorIngredienteGUI(IngredienteSeleccionadoListener listener)
    public BuscadorIngredienteGUI() {
        initComponents();
        modelo = (DefaultTableModel) tblIngredientes.getModel();
        cargarIngredientes();
        agregarListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        cbxUnidadMedida = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnElegir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Broadway", 0, 18)); // NOI18N
        jLabel1.setText("Buscador de ingredintes");

        cbxUnidadMedida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Aplica", "Piezas", "Gramos", "Mililitros" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ingredientes encontrados");

        btnElegir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnElegir.setText("Elegir ingrediente");
        btnElegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegirActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "UnidadMedida", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblIngredientes);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Buscar por nombre");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Buscar por unidad de medida");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnElegir)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(cbxUnidadMedida, 0, 201, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(63, 63, 63)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnElegir)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setIngredienteSeleccionadoListener(IngredienteSeleccionadoListener listener) {
        this.listener = listener;
    }
    
    private void agregarListeners(){
        txtNombre.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                            cargarIngredientesNombre();
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                            cargarIngredientesNombre();
                    }

                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        //Vac√≠o porque se usa para JTextField simple
                        // Ignorar
                    }
                }
        );
        
        cbxUnidadMedida.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    cargarIngredientesNombre();
            }
        });
    }
    
    private void btnElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegirActionPerformed
        // TODO add your handling code here:
                
        //Tomamos la fila seleccionada para enviarla
        int filaSeleccionada = tblIngredientes.getSelectedRow();
        
        //Si la fila es v√°lida
        if (filaSeleccionada >= 0) {
            //obtiene el ingrediente de la fila seleccionada
            IngredienteViejoDTO ingredienteSeleccionado = obtenerIngredienteDeFila(filaSeleccionada);
            
            // V√°lida el ingrediente y el listener para enviar el ingrediente
            if (ingredienteSeleccionado != null) {
                if (listener != null) {
                    int opcion = JOptionPane.showConfirmDialog(this,"¬øDesea seleccionar el ingrediente: " + ingredienteSeleccionado.getNombre() +
                                                            " con unidad de medida: " + ingredienteSeleccionado.getUnidadMedida().toString() + " ?",
                                                            "Confirmar elecci√≥n",
                                                            JOptionPane.YES_NO_OPTION);
                    if(opcion == JOptionPane.YES_OPTION){
                        listener.ingredienteSeleccionado(ingredienteSeleccionado);
                    }else if(opcion == JOptionPane.NO_OPTION){
                        return;
                    }
                    this.setVisible(false);
                }
                this.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un ingrediente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un ingrediente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnElegirActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        listener.ingredienteSeleccionado(null);
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnElegir;
    private javax.swing.JComboBox<String> cbxUnidadMedida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblIngredientes;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
    
    private void cargarIngredientes(){
        //Empezar de 0 la tabla
        modelo.setRowCount(0);
        listaIngredientes.clear();
        
        try{
            //Los ingredientes que se van a obtener
            List<IngredienteViejoDTO> ingredientes = ingredienteBO.obtenerTodos();
            
            //Verificar la lista de ingredientes
            if (ingredientes == null || ingredientes.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron ingredientes", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            for (IngredienteViejoDTO ingrediente : ingredientes) {
                modelo.addRow(new Object[] {
                    ingrediente.getNombre(),
                    ingrediente.getUnidadMedida().toString(),
                    ingrediente.getStock()
                });
                listaIngredientes.add(ingrediente);
            }
        }catch(NegocioException ne){
            JOptionPane.showMessageDialog(this, "Error al buscar ingredientes: " + ne.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(BuscadorIngredienteGUI.class.getName()).log(Level.SEVERE, null, ne);
        }
    }
    
    private void cargarIngredientesNombre(){
        
        //Empezar de 0 la tabla
        modelo.setRowCount(0);
        listaIngredientes.clear();
        
        //validar cbx y txt
        String nombreParam = null;
        UnidadMedida unidadMedidaParam = null;
        
        //Validar si hay algo en el txt del nombre
        if(txtNombre != null || !txtNombre.getText().isEmpty()){
            nombreParam = txtNombre.getText();
        }
        
        //Validar si hay algo seleccionado en la cbx de la unidad de medida
        if(cbxUnidadMedida.getSelectedItem() != null || cbxUnidadMedida.getSelectedIndex() > 0){
            //Transformar unidad de medida
            String unidadSeleccionadaStr = (String) cbxUnidadMedida.getSelectedItem();
            switch (unidadSeleccionadaStr) {
                    case "Piezas" -> unidadMedidaParam = UnidadMedida.PIEZAS;
                    case "Gramos" -> unidadMedidaParam = UnidadMedida.GRAMOS;
                    case "Mililitros" -> unidadMedidaParam = UnidadMedida.MILILITROS;
            }
        }

        try{
            List<IngredienteViejoDTO> ingredientes = ingredienteBO.obtenerPorFiltro(nombreParam, unidadMedidaParam);
            
            for (IngredienteViejoDTO ingrediente : ingredientes) {
                modelo.addRow(new Object[] {
                    ingrediente.getNombre(),
                    ingrediente.getUnidadMedida().toString(),
                    ingrediente.getStock()
                });
                listaIngredientes.add(ingrediente);
            }
        }catch(NegocioException ne){
            JOptionPane.showMessageDialog(this, "Error al buscar ingredientes por nombre: " + ne.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(BuscadorIngredienteGUI.class.getName()).log(Level.SEVERE, null, ne);
        }
    }
    
    private void cargarIngredientesUnidadMedida(){
        //1. Validaci√≥n de campo vac√≠o
        if(cbxUnidadMedida.getSelectedItem() == null || cbxUnidadMedida.getSelectedIndex() < 0){
            JOptionPane.showMessageDialog(this, "Seleccione una unidad de medida", "Informaci√≥n", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //Empezar de 0 la tabla
        modelo.setRowCount(0);
        listaIngredientes.clear();
        
        //Transformar unidad de medida
        UnidadMedida unidadMedida = null;
        String unidadSeleccionadaStr = (String) cbxUnidadMedida.getSelectedItem();
        switch (unidadSeleccionadaStr) {
                case "Piezas" -> unidadMedida = UnidadMedida.PIEZAS;
                case "Gramos" -> unidadMedida = UnidadMedida.GRAMOS;
                case "Mililitros" -> unidadMedida = UnidadMedida.MILILITROS;
        }
        
        try{
            List<IngredienteViejoDTO> ingredientes = ingredienteBO.obtenerPorUnidadMedida(unidadMedida);
            
            if (ingredientes == null || ingredientes.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron ingredientes", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            for (IngredienteViejoDTO ingrediente : ingredientes) {
                modelo.addRow(new Object[] {
                    ingrediente.getNombre(),
                    ingrediente.getUnidadMedida().toString(),
                    ingrediente.getStock()
                });
                listaIngredientes.add(ingrediente);
            }
        }catch(NegocioException ne){
            JOptionPane.showMessageDialog(this, "Error al buscar ingredientes por unidad de medida: " + ne.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(BuscadorIngredienteGUI.class.getName()).log(Level.SEVERE, null, ne);
        }
    }
        
    private IngredienteViejoDTO obtenerIngredienteDeFila(int fila) {
        if (fila >= 0 && fila < listaIngredientes.size()) {
            return listaIngredientes.get(fila);
        }
        return null;
    }
    
    public void recargarIngredientes() {
        cargarIngredientes();   
    }

}
