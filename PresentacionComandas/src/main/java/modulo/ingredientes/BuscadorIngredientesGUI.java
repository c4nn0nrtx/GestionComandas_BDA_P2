/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package modulo.ingredientes;

import DTOs.viejos.IngredienteViejoDTO;
import ENUMs.UnidadMedida;
import excepciones.NegocioException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import manejadoresBO.ManejadorBO;

/**
 *
 * @author Beto_
 */
public class BuscadorIngredientesGUI extends javax.swing.JFrame {
    IIngredienteBO ingredienteBO = ManejadorBO.crearIngredienteBO();

    /**
     * Creates new form BuscadorIngredientesGUI
     */
    public BuscadorIngredientesGUI() {
        initComponents();
        cargarIngredientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        chbNombre = new javax.swing.JCheckBox();
        chbUnidadMedida = new javax.swing.JCheckBox();
        txtNombre = new javax.swing.JTextField();
        cbxUnidadMedida = new javax.swing.JComboBox<>();
        cbxIngredientes = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnElegir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Broadway", 0, 18)); // NOI18N
        jLabel1.setText("Buscador de ingredintes");

        chbNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chbNombre.setText("Buscar por unidad de medida");
        chbNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbNombreActionPerformed(evt);
            }
        });

        chbUnidadMedida.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chbUnidadMedida.setText("Buscar por nombre");
        chbUnidadMedida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbUnidadMedidaActionPerformed(evt);
            }
        });

        txtNombre.setEnabled(false);

        cbxUnidadMedida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Piezas", "Gramos", "Mililitros" }));
        cbxUnidadMedida.setSelectedIndex(-1);
        cbxUnidadMedida.setEnabled(false);

        cbxIngredientes.setSelectedIndex(-1);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ingredientes encontrados");

        btnElegir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnElegir.setText("Elegir ingrediente");
        btnElegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegirActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "UnidadMedida", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblIngredientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbNombre)
                    .addComponent(chbUnidadMedida))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(cbxUnidadMedida, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cbxIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(btnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnElegir)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbNombre))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbUnidadMedida))
                .addGap(32, 32, 32)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(cbxIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnElegir))
                .addGap(32, 32, 32))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void agregarListeners(){
        txtNombre.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        if (chbNombre.isSelected()) {
                            cargarIngredientesNombre();
                        }
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        if (chbNombre.isSelected()) {
                            cargarIngredientesNombre();
                        }
                    }

                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        // No se usa para JTextField simple
                    }
                }
        );
        
        cbxUnidadMedida.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (chbUnidadMedida.isSelected()) {
                    cargarIngredientesUnidadMedida();
                }
            }
        });
    }
    
    private void chbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbNombreActionPerformed
        // TODO add your handling code here:
        if(chbNombre.isSelected()){
            txtNombre.setEnabled(true);
        }
        
        if(!chbNombre.isSelected()){
            txtNombre.setText(null);
            txtNombre.setEnabled(false);
            cargarIngredientes();
        }
        
    }//GEN-LAST:event_chbNombreActionPerformed

    private void chbUnidadMedidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbUnidadMedidaActionPerformed
        // TODO add your handling code here:
        if(chbUnidadMedida.isSelected()){
            cbxUnidadMedida.setEnabled(true);
        }
        
        if(!chbUnidadMedida.isSelected()){
            cbxUnidadMedida.setSelectedIndex(-1);
            cbxUnidadMedida.setEnabled(false);
        }
       
    }//GEN-LAST:event_chbUnidadMedidaActionPerformed

    private void btnElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegirActionPerformed
        // TODO add your handling code here:
        String nombre;
        UnidadMedida unidadMedida = null;
        

        // Validación 1: Nombre
        if(chbNombre.isSelected()){
            nombre = txtNombre.getText();
            if (nombre == null || nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre", "Error", JOptionPane.ERROR_MESSAGE);
                txtNombre.requestFocus();
                return;
            }
        }


        // Validación 2. UnidadMedida seleccionada
        if(chbUnidadMedida.isSelected()){
            String unidadMedidaS = (String) cbxUnidadMedida.getSelectedItem();
            if (unidadMedidaS == null || unidadMedidaS.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una unidad de medida.", "Error", JOptionPane.ERROR_MESSAGE);
                cbxUnidadMedida.requestFocus();
                return;
            }
            
            switch (unidadMedidaS) {
                case "Piezas" ->unidadMedida = UnidadMedida.PIEZAS;
                case "Gramos" -> unidadMedida = UnidadMedida.GRAMOS;
                case "Mililitros" -> unidadMedida = UnidadMedida.MILILITROS;
                default -> JOptionPane.showMessageDialog(this, "Prror con unidad de medida", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

//        try{
//            ingredienteBO
//            JOptionPane.showMessageDialog(this, "Ingrediente elegido con éxito", "Error", JOptionPane.INFORMATION_MESSAGE);
//        }catch(NegocioException ne){
//            JOptionPane.showMessageDialog(this, ne, "Error", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnElegirActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuscadorIngredientesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuscadorIngredientesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuscadorIngredientesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscadorIngredientesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscadorIngredientesGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnElegir;
    private javax.swing.JComboBox<String> cbxIngredientes;
    private javax.swing.JComboBox<String> cbxUnidadMedida;
    private javax.swing.JCheckBox chbNombre;
    private javax.swing.JCheckBox chbUnidadMedida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblIngredientes;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
    
    private void cargarIngredientes(){
        try{
            List<IngredienteViejoDTO> ingredientes = ingredienteBO.obtenerTodos();
            
            if (ingredientes == null || ingredientes.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron ingredientes", "Información", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }catch(NegocioException ne){
            
        }
    }
    
    private void cargarIngredientesNombre(){
        
    }
    
    private void cargarIngredientesUnidadMedida(){
        
    }

}
